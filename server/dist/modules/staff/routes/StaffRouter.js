"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authenticateUser_1 = require("../../authentication/middlewares/authenticateUser");
const authorizeUser_1 = __importDefault(require("../../../middlewares/authorizeUser"));
const setFilterParams_1 = __importDefault(require("../../../middlewares/setFilterParams"));
const staffListDoc_1 = require("../docs/staffListDoc");
const Staff_1 = require("../models/Staff");
const staffCountDoc_1 = require("../docs/staffCountDoc");
const staffDetailsDoc_1 = require("../docs/staffDetailsDoc");
const staffCreateDoc_1 = require("../docs/staffCreateDoc");
const staffCreateValidator_1 = require("../validators/staffCreateValidator");
const staffUpdateDoc_1 = require("../docs/staffUpdateDoc");
const staffUpdateValidator_1 = require("../validators/staffUpdateValidator");
const StaffController_1 = __importDefault(require("../controllers/StaffController"));
const staffDeleteDoc_1 = require("../docs/staffDeleteDoc");
const roles_1 = __importDefault(require("../../base/enums/roles"));
const router = express_1.default.Router();
const controller = new StaffController_1.default();
router.use(authenticateUser_1.authenticateUser);
const authorization = (0, authorizeUser_1.default)({ allowedRoles: [] });
router.get("/", staffListDoc_1.staffListDoc, (0, setFilterParams_1.default)(Staff_1.staffFilterFields), controller.get);
router.get("/count-documents", staffCountDoc_1.staffCountDoc, controller.countTotalDocuments);
router.get("/get-attendance", staffListDoc_1.staffListDoc, controller.getWithAttendance);
router.get("/user/:id", staffDetailsDoc_1.staffDetailsDoc, controller.getWithUserId);
router.get("/:id", staffDetailsDoc_1.staffDetailsDoc, controller.getOne);
router.post("/", staffCreateDoc_1.staffCreateDoc, authorization, staffCreateValidator_1.staffCreateValidator, controller.create);
router.put("/:id", staffUpdateDoc_1.staffUpdateDoc, (0, authorizeUser_1.default)({ allowedRoles: [roles_1.default.staff] }), staffUpdateValidator_1.staffUpdateValidator, controller.update);
router.delete("/:id", staffDeleteDoc_1.staffDeleteDoc, authorization, controller.delete);
exports.default = router;
